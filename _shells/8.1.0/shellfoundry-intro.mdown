---
layout: page
title: Shellfoundry
category: tut
order: 16
comments: true
version:
    - 8.1.0
---

{% assign pageUrlSplited = page.url | split: "/" %}
{% assign pageVersion = pageUrlSplited[2] %}


Shellfoundry is a command-line utility that allows you to easily create, package and install Shells in CloudShell.  It allows creating basic Shells or Shells based on a common 1st or 2nd generation Shell template. 

**Note:** Shellfoundry must be installed on an online computer as creating shells from a template requires downloading the templates from the internet.


### Version History
**1.0.3 (2017-06-28)**
* List command aborts if there is a new major version on pypi
* Old Shellfoundry versions are NOT supported anymore. Please use 1pip install shellfoundry -U1 in order to upgrade to the newest version

**1.0.2 (2017-06-27)**
* New command aborts if there is a new major version on pypi

**1.0.1 (2017-06-26)**
* New command now conforms to CloudShell naming rules

**1.0.0 (2017-06-19)**
* List command will now show templates that are installable on your cloudshell
* New command will now create the latest version of the template that match the standards installed on your cloudshell
* When invoking new or list commands, there will be a notification in the case of a new Shellfoundry version

**0.2.7 (2017-05-16)**
* Shellfoundry will now pack *categories.xml* if exists

**0.2.6 (2017-03-14)**
* Fixed some minor bugs

**0.2.2 (2017-01-22)**
* gen2/resource is the now the default template for new command instead of gen1/resource

**0.2.0 (2017-01-17)**
* List command filtering parameters have changed (legacy => gen1, tosca => gen2)
* Added another filtering parameter --layer1
* Minimum CloudShell version column appears on list command output table
* gen2 is now the default view for list command

**0.1.3 (2016-12-27)**
* `shellfoundry config` will now echo all default configuration if not override by user

**0.1.2 (2016-12-26)**
* Config command will now encrypt password field

**0.1.0 (2016-12-14)**
* Show command was added to view all available versions of a template
* A new option was added to the 'new' command. Please welcome --version. It enables template versioning on Shellfoundry.

**0.0.44 (2016-12-12)**
* Fixed a bug in config command which caused Shellfoundry to crash when config file has not existed

**0.0.43 (2016-12-11)**
* List command is now able to filter results based on shell type (`--tosca`, `--legacy`, `--all`)

**0.0.41 (2016-12-08)**
* Config command was added to allow setting configuration once for all shells in addition to local configuration

**0.0.39 (2016-10-09)**
* Pack Shell icon if specified in the *shell-definition.yml* file under `metadatatemplate_icon` for TOSCA based shells

**0.0.38 (2016-09-28)**
* Update reference to *cloudshell-rest-api 7.2.0.7* to use PUT method in update shell

**0.0.35 (2016-09-15)**
* TOSCA support was added to pack and install commands
* Generate command was added to generate the Shell driver data model in Python

**0.0.32 (2016-08-10)**
* `pack` command downloads dependencies into *dist* directory
* Dependency for git was removed
* Local shell templates are supported
* Proxy support was added for access to github

**0.0.31 (2016-08-04)**
* git prerequisite was removed. Shellfoundry works without git being preinstalled

**0.0.28 (2016-07-07)**
* Installation of package into CloudShell was fixed

**0.0.26 (2016-06-23)**
* Images copied to the *DataModel* folder (Issue #21)

**0.0.17 (2016-05-25)**
* Proper error message when `install` command fails in logging in into CloudShell

**0.0.1 (2016-05-02)**
* First release on PyPI.

### Usage

#### Installation
This command installs Shellfoundry on your computer. For more information, see [Getting Started]({{site.baseurl}}/shells/{{pageVersion}}/getting-started.html).
**Syntax:**
{% highlight bash %} pip install shellfoundry{% endhighlight %}


#### Upgrade
If you already have shellfoundry installed on your computer, run this command to upgrade it to the latest version. For more information, see [Getting Started]({{site.baseurl}}/shells/{{pageVersion}}/getting-started.html).
**Note:** To prevent backwards compatibility issues, old versions of shellFoundry are disabled with every new shellfoundry release.
**Syntax:**
{% highlight bash %}python -m pip install shellfoundry –upgrade{% endhighlight %}

#### Configuring CloudShell settings
(Required) This command sets the CloudShell Portal settings and user access credentials in Shellfoundry. For more information, see [Getting Started]({{site.baseurl}}/shells/{{pageVersion}}/getting-started.html). 
**Syntax:**
Run this command from the Shell’s root folder.
{% highlight bash %}shellfoundry config <key name> <key value>{% endhighlight %}
**Example:**
{% highlight bash %}shellfoundry config username admin{% endhighlight %}
|  Key               |  Value 
|  ----------------  |  -----------------------------------------------------------------  |            
|  username          | :CloudShell username. For example: “admin”:                         |
|  domain            | :CloudShell domain. 
                        Note that for 2nd Generation Shells, the domain must be “Global”.: |
|  defaultview       | :Set the default view. 
                        “gen2”/”all””layer1”. Default is “gen2”.                         : |
|  password          | :CloudShell password (encrypted).                                 : |
|  host              | :The hostname or IP address of the CloudShell Portal machine.     : |
|  port              | :The port to be used for Quali API. Default is “9000”.            : |


#### Creating a Shell
This command creates a Shell that is based on the **gen2/resource** template. Use this if you want to create a Shell to customize or experiment on. For more information, see [The Shell Project Guide]({{site.baseurl}}/shells/{{pageVersion}}/the-shell-project.html).
**Syntax:**
Run this command in the Shell’s root folder.
{% highlight bash %}shellfoundry new <Shell-name>{% endhighlight %}
**Example:**
{% highlight bash %}shellfoundry new my-basic-shell{% endhighlight %}

#### Creating a Shell from a template
This command creates a Shell that features the template’s settings, attributes and driver. For more information, see [Modeling Shells with TOSCA]({{site.baseurl}}/shells/{{pageVersion}}/modeling-the-shell.html).
**Syntax:**
Run this command in the Shell’s root folder.
{% highlight bash %}shellfoundry new <Shell-name> --template <template>{% endhighlight %}
**Example:**
{% highlight bash %}shellfoundry new my-switch-g2 --template=gen2/networking/switch{% endhighlight %}

**Note:** This command creates a Shell that is based on the latest version of the specified template, which is supported by your CloudShell version. However, you can also create a Shell based on a different version of the template, by adding `--version <version_number>` to the command. 

#### Listing available Shell templates
This command lists the 1st and 2nd generation Shell templates you can use for your new Shell. For more information, see [Modeling Shells with TOSCA]({{site.baseurl}}/shells/{{pageVersion}}/modeling-the-shell.html).
**Syntax:**
{% highlight bash %}shellfoundry list{% endhighlight %}
To view templates of a specific type, add the appropriate flag to the command: `--gen1`, `--gen2`, `--layer1`, `--all` (lists all available templates).

#### Listing versions of a Shell template
To display a list of the versions for a given template, run the following in command-line:
{% highlight bash %}shellfoundry show <template_name>{% endhighlight %}
The versions are displayed in descending order from latest to earliest.

#### Packaging a Shell
This command packs the shell's source code, data model and configuration into a ZIP package, which can be uploaded into CloudShell. For additional information, see [Deploying to Production]({{site.baseurl}}/shells/{{pageVersion}}/deploying-to-production.html).
**Syntax:**
Run this command from the Shell’s root folder.
{% highlight bash %}shellfoundry pack{% endhighlight %}
A ZIP package is created in the Shell’s *dist* directory with the name "nutshell.zip".
**Note:** The `pack` command requires the presence of a *shell.yml* file, which is created by default in Shells created using Shellfoundry. However, if your shell was created elsewhere, make sure to add a *shell.yml* file with the following structure:
`###shell.yml
 shell:
    name: nutshell`

#### Packaging and importing a Shell into CloudShell
This command creates a distributable zip file for the Shell and imports it into CloudShell using the CloudShell Portal and user defined by the `shellfoundry configure` command. For more information, see [Getting Started]({{site.baseurl}}/shells/{{pageVersion}}/getting-started.html).
**Syntax:**
Run this command from the Shell’s root folder.
{% highlight bash %}shellfoundry install{% endhighlight %}

#### Creating the Shell’s data model file
The shell’s data model (*data_model.py* file) consists of the standard specifications and the extended data model, which is defined in the *shell-definition.yaml* file. When creating a new Shell, you will also need to import its data model. For additional information, see [Managing the Shell’s Data Model]({{site.baseurl}}/shells/{{pageVersion}}/generating-shell-data-model.html).
**Syntax:**
Run this command from the Shell’s root folder.
{% highlight bash %}shellfoundry generate{% endhighlight %}
